<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        q/5jbEf147+cqzZcOt55v6ajLp+o/unB+fvn3/fdONV5P61P775usv5s0k//Zlt1yOdW3ih/6+WT1S/+
        dvviMr954cqf/77WeX8yWz01tr20o/q7v9pWHXR29/367vT/OVP96tH59fajbxlAJEl6tmcAGSIDyDOr
        Z9sAsuN7c/Xw8dTW7dW/lvdx3FUTu9xnv9O3VgecNf/v4G2rzQAiSZLaGUCGyADyzOrZNoCcevdM9c8/
        2Fb9rDTx7dnqJefsvC17Q469arI65cvT1Wfunalef0l/780AIkmS2hlAhsgA8szq2TaA7H/m1ur3b5iq
        PnTzVHXo+Utf+xs3T1Rzfz5Xv69/KQPK8V/o72RxA4gkSWpnABmitRhAcjLwoed3b/g+t/Tic7ZWL9s4
        Vr2gbDy2b8t//8Z5Y9VLzplf9oDy368uG8Rv+fxE9cpNY9XzBg6hyf3yejdcOlG9eA9OQM5fxPNX8DeX
        x8uGdg7L6bpfynMfUl7LQWfPP26uevSai8arIy+bqF/T4Gtvem55jXlvr1hmw3//M+bfY9ZB1+153Ndf
        PF6v56zD5Z5nudZyAGne2xFbxqv/UtZje2/Dcj2/vN/DLhir11vWX9Zj1/1Sbss6f2H5nPJZ57kyRORq
        Uy8vP+9aJjWva/C95jm3/8VwA0he73++YP5zfkPe4zK/VwYQSZLUzgAyRH0OINmYHX9grvpff7Wt/stz
        ho32stlonf5Obp+rrxyU/25u+293TtfL/H25bePXZ6uzvjJT7Sgbj//419vqDeks8+A3ZqojygbpCTdM
        1Rt9f1de70/K7f+7tK3c94TyWrKB337ObMCffNt0Nf7tcv/yGLl/Hu8fyr85ZOf3vjC1yyCS58ljP/a9
        ueqjt09Xp5fXktf2j98vz1WWzb+P/tlsPRi1l/vwLVP1Bu/fl/f/0H0zS25LeX0//stt9Xv8RHm/7eHi
        4LKhe/F9s/Xti6+xPE+e99yyPnb3uTStxQDyhvLcOdl7auGzyzrIa8z6ufT+ueplHcPBi8pw8kfldyuv
        P++jWW+PfW9b9Tdl/f5W+T1qf1b5LLLOc07HGWXj/gdl/eXzymebZbPcmV+ZrV5RBtH287zr2ql6mfzO
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAANqe85z/D2YKgf55utZgAAAAAElFTkSuQmCC
</value>
  </data>
</root>